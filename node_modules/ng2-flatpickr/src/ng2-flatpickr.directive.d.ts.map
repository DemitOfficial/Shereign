{"version":3,"file":"ng2-flatpickr.directive.d.ts","sources":["ng2-flatpickr.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { ControlContainer, FormControl, NgControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FlatpickrEvent } from './flatpickr-event.interface';\r\nimport { FlatpickrInstance } from './flatpickr-instance';\r\nimport { FlatpickrOptions } from './flatpickr-options.interface';\r\nexport declare class Ng2FlatpickrDirective implements AfterViewInit, OnDestroy, OnInit, OnChanges {\r\n    protected parent: ControlContainer;\r\n    protected ngControl: NgControl;\r\n    protected element: ElementRef;\r\n    protected renderer: Renderer2;\r\n    /**\r\n     * The flatpickr configuration as a single object of values.\r\n     *\r\n     * See https://chmln.github.io/flatpickr/options/ for full list.\r\n     */\r\n    flatpickrOptions: FlatpickrOptions;\r\n    /**\r\n     * Placeholder for input field.\r\n     *\r\n     * Default:  null\r\n     */\r\n    placeholder: string;\r\n    /**\r\n     * Exactly the same as date format, but for the altInput field.\r\n     *\r\n     * Default:  \"F j, Y\"\r\n     */\r\n    flatpickrAltFormat: string;\r\n    /**\r\n     * Show the user a readable date (as per altFormat), but return something\r\n     * totally different to the server.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrAltInput: boolean;\r\n    /**\r\n     * This class will be added to the input element created by the altInput\r\n     * option.\r\n     *\r\n     * Default:  \"\"\r\n     */\r\n    flatpickrAltInputClass: string;\r\n    /**\r\n     * Allows the user to enter a date directly input the input field. By\r\n     * default, direct entry is disabled.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrAllowInput: boolean;\r\n    /**\r\n     * Instead of body, appends the calendar to the specified node instead.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrAppendTo: any;\r\n    /**\r\n     * Whether clicking on the input should open the picker.\r\n     * You could disable this if you wish to open the calendar manually\r\n     * with.open().\r\n     *\r\n     * Default:  true\r\n     */\r\n    flatpickrClickOpens: boolean;\r\n    /**\r\n     * A string of characters which are used to define how the date will be\r\n     * displayed in the input box.\r\n     * See https://chmln.github.io/flatpickr/formatting/ for supported tokens.\r\n     *\r\n     * Default:  \"Y-m-d\"\r\n     */\r\n    flatpickrDateFormat: string;\r\n    /**\r\n     * Sets the initial selected date(s).\r\n     *\r\n     * If you're using {mode: \"multiple\"} or a range calendar supply an Array of\r\n     * Date objects or an Array of date strings which follow your dateFormat.\r\n     *\r\n     * Otherwise, you can supply a single Date object or a date string.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrDefaultDate: string | Date;\r\n    /**\r\n     * Disable an array of specific dates, date ranges, or functions to disable\r\n     * dates. See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\r\n     *\r\n     * Default:  []\r\n     */\r\n    flatpickrDisable: string[] | Date[];\r\n    /**\r\n     * Set disableMobile to true to always use the non-native picker. By\r\n     * default, Flatpickr utilizes native datetime widgets unless certain\r\n     * options (e.g. disable) are used.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrDisableMobile: boolean;\r\n    /**\r\n     * Enable an array of specific dates, date ranges, or functions to enable\r\n     * dates. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\r\n     *\r\n     * Default:  []\r\n     */\r\n    flatpickrEnable: string[] | Date[];\r\n    /**\r\n     * Enables time picker.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrEnableTime: boolean;\r\n    /**\r\n     * Enables seconds in the time picker.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrEnableSeconds: boolean;\r\n    /**\r\n     * Adjusts the step for the hour input (incl. scrolling).\r\n     *\r\n     * Default:  1\r\n     */\r\n    flatpickrHourIncrement: number;\r\n    /**\r\n     * Displays the calendar inline.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrInline: boolean;\r\n    /**\r\n     * Use a specific locale for the flatpickr instance.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrLocale: Object;\r\n    /**\r\n     * The maximum date that a user can pick to (inclusive).\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrMaxDate: string | Date;\r\n    /**\r\n     * The minimum date that a user can start picking from (inclusive).\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrMinDate: string | Date;\r\n    /**\r\n     * Adjusts the step for the minute input (incl. scrolling).\r\n     *\r\n     * Default:  5\r\n     */\r\n    flatpickrMinuteIncrement: number;\r\n    /**\r\n     * \"single\", \"multiple\", or \"range\"\r\n     *\r\n     * Default:  \"single\"\r\n     */\r\n    flatpickrMode: string;\r\n    /**\r\n     * HTML for the arrow icon, used to switch months.\r\n     *\r\n     * Default:  \">\"\r\n     */\r\n    flatpickrNextArrow: string;\r\n    /**\r\n     * Hides the day selection in calendar. Use it along with enableTime to\r\n     * create a time picker.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrNoCalendar: boolean;\r\n    /**\r\n     * Function that expects a date string and must return a Date object.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrParseDate: Function;\r\n    /**\r\n     * HTML for the left arrow icon.\r\n     *\r\n     * Default:  \"<\"\r\n     */\r\n    flatpickrPrevArrow: string;\r\n    /**\r\n     * Show the month using the shorthand version (ie, Sep instead of September).\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrShorthandCurrentMonth: boolean;\r\n    /**\r\n     * Position the calendar inside the wrapper and next to the input element\r\n     * (Leave false unless you know what you're doing).\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrStatic: boolean;\r\n    /**\r\n     * Displays time picker in 24 hour mode without AM/PM selection when enabled.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrTime_24hr: boolean;\r\n    flatpickrUtc: boolean;\r\n    /**\r\n     * Enables display of week numbers in calendar.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrWeekNumbers: boolean;\r\n    /**\r\n     * Custom elements and input groups.\r\n     *\r\n     * Default:  false\r\n     */\r\n    flatpickrWrap: boolean;\r\n    /**\r\n     * onChange gets triggered when the user selects a date, or changes the time on a selected date.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrOnChange: EventEmitter<FlatpickrEvent>;\r\n    /**\r\n     * onClose gets triggered when the calendar is closed.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrOnClose: EventEmitter<FlatpickrEvent>;\r\n    /**\r\n     * onOpen gets triggered when the calendar is opened.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrOnOpen: EventEmitter<FlatpickrEvent>;\r\n    /**\r\n     * onReady gets triggered once the calendar is in a ready state.\r\n     *\r\n     * Default:  null\r\n     */\r\n    flatpickrOnReady: EventEmitter<FlatpickrEvent>;\r\n    /** Allow double-clicking on the control to open/close it. */\r\n    onClick(): void;\r\n    protected globalOnChange: Function;\r\n    protected globalOnClose: Function;\r\n    protected globalOnOpen: Function;\r\n    protected globalOnReady: Function;\r\n    protected flatpickr: FlatpickrInstance;\r\n    protected formControlListener: Subscription;\r\n    /** Allow access properties using index notation */\r\n    [key: string]: any;\r\n    constructor(parent: ControlContainer, ngControl: NgControl, element: ElementRef, renderer: Renderer2);\r\n    readonly control: FormControl;\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    ngOnInit(): void;\r\n    /**\r\n     * Fire off the event emitter for the directive element, and also for the\r\n     * global onChange callback, if defined.\r\n     */\r\n    protected eventOnChange(selectedDates: Date[], dateStr: string, instance: Object): void;\r\n    /**\r\n     * Fire off the event emitter for the directive element, and also for the\r\n     * global onClose callback, if defined.\r\n     */\r\n    protected eventOnClose(selectedDates: Date[], dateStr: string, instance: Object): void;\r\n    /**\r\n     * Fire off the event emitter for the directive element, and also for the\r\n     * global onOpen callback, if defined.\r\n     */\r\n    protected eventOnOpen(selectedDates: Date[], dateStr: string, instance: Object): void;\r\n    /**\r\n     * Fire off the event emitter for the directive element, and also for the\r\n     * global onReady callback, if defined.\r\n     */\r\n    protected eventOnReady(selectedDates: Date[], dateStr: string, instance: Object): void;\r\n    /**\r\n     * Return the configuration value for option {option}, or {defaultValue} if it\r\n     * doesn't exist.\r\n     */\r\n    protected getOption(option: string, defaultValue?: any): any;\r\n}\r\n"]}