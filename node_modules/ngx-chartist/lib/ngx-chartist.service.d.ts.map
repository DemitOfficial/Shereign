{"version":3,"file":"ngx-chartist.service.d.ts","sources":["ngx-chartist.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import * as Chartist from 'chartist';\nexport declare type IChartistEscapeMap = Chartist.IChartistEscapeMap;\nexport declare type IChartistPieChart = Chartist.IChartistPieChart;\nexport declare type IChartistBarChart = Chartist.IChartistBarChart;\nexport declare type IChartistLineChart = Chartist.IChartistLineChart;\nexport declare type IChartistCandleChart = Chartist.IChartistCandleChart;\nexport declare type IFixedScaleAxisStatic = Chartist.IFixedScaleAxisStatic;\nexport declare type IAutoScaleAxisStatic = Chartist.IAutoScaleAxisStatic;\nexport declare type IStepAxisStatic = Chartist.IStepAxisStatic;\nexport declare type IChartistSvgStatic = Chartist.ChartistSvgStatic;\nexport declare type IChartistInterpolationStatic = Chartist.ChartistInterpolationStatic;\nexport declare class NgxChartistService {\n    constructor();\n    getPrecision(): number;\n    getEscapingMap(): IChartistEscapeMap;\n    getPie(): IChartistPieChart;\n    getBar(): IChartistBarChart;\n    getLine(): IChartistLineChart;\n    getCandle(): IChartistCandleChart;\n    getFixedScaleAxis(): IFixedScaleAxisStatic;\n    getAutoScaleAxis(): IAutoScaleAxisStatic;\n    getStepAxis(): IStepAxisStatic;\n    getSvg(): IChartistSvgStatic;\n    getInterpolation(): IChartistInterpolationStatic;\n    getNoop(): Function;\n    getPlugins(): any;\n    alphaNumerate(n: number): string;\n    extend(target: Object, ...sources: Object[]): Object;\n    replaceAll(str: string, subStr: string, newSubStr: string): string;\n    ensureUnit(value: number, unit: string): string;\n    quantity(input: string | number): Object;\n    query(query: Node | string): Node;\n    times(length: number): Array<any>;\n    sum(previous: number, current: number): number;\n    mapMultiply(factor: number): (num: number) => number;\n    mapAdd(addend: number): (num: number) => number;\n    serialMap(arr: Array<any>, cb: Function): Array<any>;\n    roundWithPrecision(value: number, digits?: number): number;\n    getMultiValue(value: any, dimension?: any): number;\n    serialize(data: Object | string | number): string;\n    deserialize(data: string): Object | string | number;\n    createSvg(container: Node, width: string, height: string, className: string): Object;\n}\n"]}