{"version":3,"file":"bar-rating.d.ts","sources":["bar-rating.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, Validator, FormControl } from '@angular/forms';\nexport declare class BarRating implements OnInit, OnChanges, ControlValueAccessor, Validator {\n    private changeDetectorRef;\n    contexts: {\n        fraction: boolean;\n        selected: boolean;\n        active: boolean;\n        click: (e: any) => void;\n        enter: () => void;\n    }[];\n    nextRate: number;\n    disabled: boolean;\n    /** Current rating. Can be a decimal value like 3.14 */\n    rate: any;\n    /** Maximal rating that can be given using this widget. */\n    max: number;\n    /** A flag indicating if rating can be updated. */\n    readOnly: boolean;\n    /** Set the theme */\n    theme: string;\n    /** Show rating title */\n    showText: boolean;\n    /** Replace rate value with a title */\n    titles: any[];\n    /** A flag indicating if rating is required for form validation. */\n    required: boolean;\n    /**\n     * An event fired when a user is hovering over a given rating.\n     * Event's payload equals to the rating being hovered over.\n     */\n    hover: EventEmitter<number>;\n    /**\n     * An event fired when a user stops hovering over a given rating.\n     * Event's payload equals to the rating of the last item being hovered over.\n     */\n    leave: EventEmitter<number>;\n    /**\n     * An event fired when a user selects a new rating.\n     * Event's payload equals to the newly selected rating.\n     */\n    rateChange: EventEmitter<number>;\n    constructor(changeDetectorRef: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    update(newRate: number, internalChange?: boolean): void;\n    /** Reset rate value */\n    reset(): void;\n    private updateState;\n    private handleClick;\n    private handleEnter;\n    /** This is the initial value set to the component */\n    writeValue(value: number): void;\n    validate(c: FormControl): {\n        required: boolean;\n    } | null;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}