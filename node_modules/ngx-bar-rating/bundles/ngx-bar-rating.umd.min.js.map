{"version":3,"sources":["../../../projects/ngx-bar-rating/src/lib/bar-rating.ts","../../../projects/ngx-bar-rating/src/lib/bar-rating.pipe.ts","../../../projects/ngx-bar-rating/src/lib/bar-rating.module.ts"],"names":["RATING_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","BarRating","multi","RATING_VALUE_VALIDATOR","NG_VALIDATORS","changeDetectorRef","this","contexts","max","readOnly","theme","showText","titles","required","hover","EventEmitter","leave","rateChange","onChange","_","onTouched","prototype","ngOnChanges","changes","rate","update","ngOnInit","_this","Array","from","length","context","i","selected","fraction","active","click","e","handleClick","enter","handleEnter","updateState","newRate","internalChange","disabled","emit","reset","nextRate","nextValue","index","Math","round","value","preventDefault","stopPropagation","map","writeValue","markForCheck","validate","c","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","BarRatingPipe","transform","Pipe","name","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"kbAeA,IAAMA,EAAwB,CAC5BC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAIHC,EAAyB,CAC7BN,QAASO,EAAAA,cACTL,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAuDP,SAAAD,EAAoBI,GAAAC,KAAAD,kBAAAA,EA3CpBC,KAAAC,SAA+G,GAQtGD,KAAAE,IAAM,EAGNF,KAAAG,UAAW,EAGXH,KAAAI,MAAQ,UAGRJ,KAAAK,UAAW,EAGXL,KAAAM,OAAS,GAGTN,KAAAO,UAAW,EAMVP,KAAAQ,MAAQ,IAAIC,EAAAA,aAMZT,KAAAU,MAAQ,IAAID,EAAAA,aAMZT,KAAAW,WAAa,IAAIF,EAAAA,cAAqB,GAoFhDT,KAAAY,SAAW,SAACC,KAEZb,KAAAc,UAAY,oBAjFZnB,EAAAoB,UAAAC,YAAA,SAAYC,GACNA,EAAQC,MACVlB,KAAKmB,OAAOnB,KAAKkB,OAIrBvB,EAAAoB,UAAAK,SAAA,WAAA,IAAAC,EAAArB,KACEA,KAAKC,SAAWqB,MAAMC,KAAK,CAAEC,OAAQxB,KAAKE,MAAO,SAACuB,EAASC,GAAM,MAAA,CAC/DC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,MAAO,SAACC,GAAM,OAAAV,EAAKW,YAAYD,EAAGL,EAAI,IACtCO,MAAO,WAAM,OAAAZ,EAAKa,YAAYR,EAAI,QAGpC1B,KAAKmC,YAAYnC,KAAKkB,OAGxBvB,EAAAoB,UAAAI,OAAA,SAAOiB,EAAiBC,QAAA,IAAAA,IAAAA,GAAA,GACjBrC,KAAKG,UAAaH,KAAKsC,UAAYtC,KAAKkB,OAASkB,IACpDpC,KAAKkB,KAAOkB,EACZpC,KAAKW,WAAW4B,KAAKvC,KAAKkB,OAExBmB,IACFrC,KAAKY,SAASZ,KAAKkB,MACnBlB,KAAKc,aAEPd,KAAKmC,YAAYnC,KAAKkB,OAIxBvB,EAAAoB,UAAAyB,MAAA,WACExC,KAAKU,MAAM6B,KAAKvC,KAAKyC,UACrBzC,KAAKmC,YAAYnC,KAAKkB,OAGhBvB,EAAAoB,UAAAoB,YAAA,SAAYO,GAAZ,IAAArB,EAAArB,KAENA,KAAKyC,SAAWC,EAAY,EAE5B1C,KAAKC,SAAWqB,MAAMC,KAAK,CAAEC,OAAQxB,KAAKE,MAAO,SAACuB,EAASkB,GAAU,MAAA,CACnEhB,SAAUgB,EAAQ,GAAKD,EACvBd,UAAWe,EAAQ,IAAMC,KAAKC,MAAMH,IAAcA,EAAY,IAAM,GACpEb,QAAQ,EACRC,MAAO,SAACC,GAAM,OAAAV,EAAKW,YAAYD,EAAGY,IAClCV,MAAO,WAAM,OAAAZ,EAAKa,YAAYS,SAI1BhD,EAAAoB,UAAAiB,YAAA,SAAYD,EAAGe,GAErBf,EAAEgB,iBACFhB,EAAEiB,kBACFhD,KAAKmB,OAAO2B,EAAQ,IAGdnD,EAAAoB,UAAAmB,YAAA,SAAYS,GACb3C,KAAKsC,UAAatC,KAAKG,WAE1BH,KAAKC,SAASgD,KAAI,SAACxB,EAASC,GAC1BD,EAAQI,OAASH,GAAKiB,EACtBlB,EAAQG,UAAW,EACnBH,EAAQE,UAAW,KAErB3B,KAAKyC,SAAWE,EAChB3C,KAAKQ,MAAM+B,KAAKI,KAKpBhD,EAAAoB,UAAAmC,WAAA,SAAWJ,GACT9C,KAAKmB,OAAO2B,GAAO,GACnB9C,KAAKD,kBAAkBoD,gBAGzBxD,EAAAoB,UAAAqC,SAAA,SAASC,GACP,OAAQrD,KAAKO,WAAa8C,EAAEP,MAAS,CAAEvC,UAAU,GAAS,MAQ5DZ,EAAAoB,UAAAuC,iBAAA,SAAiBC,GACfvD,KAAKY,SAAW2C,GAGlB5D,EAAAoB,UAAAyC,kBAAA,SAAkBD,GAChBvD,KAAKc,UAAYyC,GAGnB5D,EAAAoB,UAAA0C,iBAAA,SAAiBC,GACf1D,KAAKsC,SAAWoB,4BApJnBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,SAAA,yhBAEAC,UAAW,CAACzE,EAAuBO,GACnCmE,gBAAiBC,EAAAA,wBAAwBC,8SAzBzCC,EAAAA,mDAkCCC,EAAAA,mBAGAA,EAAAA,wBAGAA,EAAAA,qBAGAA,EAAAA,wBAGAA,EAAAA,sBAGAA,EAAAA,wBAGAA,EAAAA,qBAMAC,EAAAA,sBAMAA,EAAAA,2BAMAA,EAAAA,2BCzEH,SAAAC,YAEEA,EAAAvD,UAAAwD,UAAA,SAAUzB,EAAmBxC,GAE3B,YAFQ,IAAAwC,IAAAA,EAAA,GAEDxC,EAAOwC,IAAUA,EAAQ,4BAPnC0B,EAAAA,KAAIZ,KAAA,CAAC,CACJa,KAAM,sBCWR,iCARCC,EAAAA,SAAQd,KAAA,CAAC,CACRe,aAAc,CAAChF,EAAW2E,GAC1BM,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAEFC,QAAS,CAACpF","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  forwardRef\n} from '@angular/core';\nimport { ControlValueAccessor, Validator, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\n\n/** This allows support [(ngModel)] and ngControl. */\nconst RATING_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => BarRating),\n  multi: true\n};\n\n/** This allows control required validation. */\nconst RATING_VALUE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => BarRating),\n  multi: true,\n};\n\n@Component({\n  selector: 'bar-rating',\n  templateUrl: './bar-rating.html',\n  styleUrls: ['./bar-rating.scss'],\n  providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarRating implements OnInit, OnChanges, ControlValueAccessor, Validator {\n\n  contexts: { fraction: boolean, selected: boolean, active: boolean, click: (e) => void, enter: () => void }[] = [];\n  nextRate: number;\n  disabled: boolean;\n\n  /** Current rating. Can be a decimal value like 3.14 */\n  @Input() rate;\n\n  /** Maximal rating that can be given using this widget. */\n  @Input() max = 5;\n\n  /** A flag indicating if rating can be updated. */\n  @Input() readOnly = false;\n\n  /** Set the theme */\n  @Input() theme = 'default';\n\n  /** Show rating title */\n  @Input() showText = false;\n\n  /** Replace rate value with a title */\n  @Input() titles = [];\n\n  /** A flag indicating if rating is required for form validation. */\n  @Input() required = false;\n\n  /**\n   * An event fired when a user is hovering over a given rating.\n   * Event's payload equals to the rating being hovered over.\n   */\n  @Output() hover = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user stops hovering over a given rating.\n   * Event's payload equals to the rating of the last item being hovered over.\n   */\n  @Output() leave = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user selects a new rating.\n   * Event's payload equals to the newly selected rating.\n   */\n  @Output() rateChange = new EventEmitter<number>(true);\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.rate) {\n      this.update(this.rate);\n    }\n  }\n\n  ngOnInit(): void {\n    this.contexts = Array.from({ length: this.max }, (context, i) => ({\n      selected: false,\n      fraction: false,\n      active: false,\n      click: (e) => this.handleClick(e, i + 1),\n      enter: () => this.handleEnter(i + 1)\n    }));\n\n    this.updateState(this.rate);\n  }\n\n  update(newRate: number, internalChange = true): void {\n    if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n      this.rate = newRate;\n      this.rateChange.emit(this.rate);\n    }\n    if (internalChange) {\n      this.onChange(this.rate);\n      this.onTouched();\n    }\n    this.updateState(this.rate);\n  }\n\n  /** Reset rate value */\n  reset(): void {\n    this.leave.emit(this.nextRate);\n    this.updateState(this.rate);\n  }\n\n  private updateState(nextValue): void {\n    /** Set rate value as text */\n    this.nextRate = nextValue - 1;\n    /** Set the rating */\n    this.contexts = Array.from({ length: this.max }, (context, index) => ({\n      selected: index + 1 <= nextValue,\n      fraction: (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5,\n      active: false,\n      click: (e) => this.handleClick(e, index),\n      enter: () => this.handleEnter(index)\n    }));\n  }\n\n  private handleClick(e, value): void {\n    /** (NOT TESTED) Remove 300ms click delay on touch devices */\n    e.preventDefault();\n    e.stopPropagation();\n    this.update(value + 1);\n  }\n\n  private handleEnter(index): void {\n    if (!this.disabled && !this.readOnly) {\n      /** Add selected class for rating hover */\n      this.contexts.map((context, i) => {\n        context.active = i <= index;\n        context.fraction = false;\n        context.selected = false;\n      });\n      this.nextRate = index;\n      this.hover.emit(index);\n    }\n  }\n\n  /** This is the initial value set to the component */\n  writeValue(value: number): void {\n    this.update(value, false);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  validate(c: FormControl): { required: boolean } | null {\n    return (this.required && !c.value) ? { required: true } : null;\n  }\n\n  onChange = (_: any) => {\n  };\n  onTouched = () => {\n  };\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'rateTitle'\n})\nexport class BarRatingPipe implements PipeTransform {\n\n  transform(value: number = 0, titles?: any): string {\n    /** Initialize value with 0 in case of undefined */\n    return titles[value] || value + 1;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BarRating } from './bar-rating';\nimport { BarRatingPipe } from './bar-rating.pipe';\n\n@NgModule({\n  declarations: [BarRating, BarRatingPipe],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [BarRating]\n})\nexport class BarRatingModule {\n}\n"]}