{"version":3,"sources":["../../../projects/ngx-spinner/src/lib/ngx-spinner.enum.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.service.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.component.ts","../../../projects/ngx-spinner/src/lib/safe-html.pipe.ts","../../../projects/ngx-spinner/src/lib/ngx-spinner.module.ts"],"names":["LOADERS","ball-8bits","ball-atom","ball-beat","ball-circus","ball-climbing-dot","ball-clip-rotate","ball-clip-rotate-multiple","ball-clip-rotate-pulse","ball-elastic-dots","ball-fall","ball-fussion","ball-grid-beat","ball-grid-pulse","ball-newton-cradle","ball-pulse","ball-pulse-rise","ball-pulse-sync","ball-rotate","ball-running-dots","ball-scale","ball-scale-multiple","ball-scale-pulse","ball-scale-ripple","ball-scale-ripple-multiple","ball-spin","ball-spin-clockwise","ball-spin-clockwise-fade","ball-spin-clockwise-fade-rotating","ball-spin-fade","ball-spin-fade-rotating","ball-spin-rotate","ball-square-clockwise-spin","ball-square-spin","ball-triangle-path","ball-zig-zag","ball-zig-zag-deflect","cog","cube-transition","fire","line-scale","line-scale-party","line-scale-pulse-out","line-scale-pulse-out-rapid","line-spin-clockwise-fade","line-spin-clockwise-fade-rotating","line-spin-fade","line-spin-fade-rotating","pacman","square-jelly-box","square-loader","square-spin","timer","triangle-skew-spin","DEFAULTS","BD_COLOR","SPINNER_COLOR","SPINNER_TYPE","Z_INDEX","PRIMARY_SPINNER","init","Object","assign","this","NgxSpinnerService","spinnerObservable","BehaviorSubject","prototype","getSpinner","name","asObservable","pipe","filter","x","show","spinner","_this","Promise","resolve","_reject","setTimeout","keys","length","next","NgxSpinner","hide","debounce","Injectable","args","providedIn","NgxSpinnerComponent","spinnerService","changeDetector","disableAnimation","ngUnsubscribe","Subject","setDefaultOptions","bdColor","size","color","type","fullScreen","divArray","divCount","zIndex","template","showSpinner","handleKeyboardEvent","event","spinnerDOM","nativeElement","returnValue","preventDefault","ngOnInit","takeUntil","subscribe","onInputChange","detectChanges","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","state","style","opacity","transition","animate","ChangeDetectorRef","Input","ViewChild","HostListener","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","Pipe","DomSanitizer","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export const LOADERS = {\n  'ball-8bits': 16,\n  'ball-atom': 4,\n  'ball-beat': 3,\n  'ball-circus': 5,\n  'ball-climbing-dot': 4,\n  'ball-clip-rotate': 1,\n  'ball-clip-rotate-multiple': 2,\n  'ball-clip-rotate-pulse': 2,\n  'ball-elastic-dots': 5,\n  'ball-fall': 3,\n  'ball-fussion': 4,\n  'ball-grid-beat': 9,\n  'ball-grid-pulse': 9,\n  'ball-newton-cradle': 4,\n  'ball-pulse': 3,\n  'ball-pulse-rise': 5,\n  'ball-pulse-sync': 3,\n  'ball-rotate': 1,\n  'ball-running-dots': 5,\n  'ball-scale': 1,\n  'ball-scale-multiple': 3,\n  'ball-scale-pulse': 2,\n  'ball-scale-ripple': 1,\n  'ball-scale-ripple-multiple': 3,\n  'ball-spin': 8,\n  'ball-spin-clockwise': 8,\n  'ball-spin-clockwise-fade': 8,\n  'ball-spin-clockwise-fade-rotating': 8,\n  'ball-spin-fade': 8,\n  'ball-spin-fade-rotating': 8,\n  'ball-spin-rotate': 2,\n  'ball-square-clockwise-spin': 8,\n  'ball-square-spin': 8,\n  'ball-triangle-path': 3,\n  'ball-zig-zag': 2,\n  'ball-zig-zag-deflect': 2,\n  'cog': 1,\n  'cube-transition': 2,\n  'fire': 3,\n  'line-scale': 5,\n  'line-scale-party': 5,\n  'line-scale-pulse-out': 5,\n  'line-scale-pulse-out-rapid': 5,\n  'line-spin-clockwise-fade': 8,\n  'line-spin-clockwise-fade-rotating': 8,\n  'line-spin-fade': 8,\n  'line-spin-fade-rotating': 8,\n  'pacman': 6,\n  'square-jelly-box': 2,\n  'square-loader': 1,\n  'square-spin': 1,\n  'timer': 1,\n  'triangle-skew-spin': 1\n};\n\nexport const DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  SPINNER_TYPE: 'ball-scale-multiple',\n  Z_INDEX: 99999,\n};\n\nexport const PRIMARY_SPINNER = 'primary';\n\nexport type Size = 'default' | 'small' | 'medium' | 'large';\n\nexport interface Spinner {\n  bdColor?: string;\n  size?: Size;\n  color?: string;\n  type?: string;\n  fullScreen?: boolean;\n  zIndex?: number;\n  template?: string;\n  showSpinner?: boolean;\n}\n\nexport class NgxSpinner {\n  name: string;\n  bdColor: string;\n  size: Size;\n  color: string;\n  type: string;\n  class: string;\n  divCount: number;\n  divArray: Array<number>;\n  fullScreen: boolean;\n  show: boolean;\n  zIndex: number;\n  template: string;\n  showSpinner: boolean;\n\n  constructor(init?: Partial<NgxSpinner>) {\n    Object.assign(this, init);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NgxSpinner, PRIMARY_SPINNER, Spinner } from './ngx-spinner.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSpinnerService {\n  /**\n   * Spinner observable\n   *\n   * @memberof NgxSpinnerService\n   */\n  // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n  public spinnerObservable = new BehaviorSubject<NgxSpinner>(null);\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() { }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n  getSpinner(name: string): Observable<NgxSpinner> {\n    return this.spinnerObservable.asObservable().pipe(filter((x: NgxSpinner) => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n  show(name: string = PRIMARY_SPINNER, spinner?: Spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n          resolve(true);\n        }\n      }, 10);\n    });\n\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n  hide(name: string = PRIMARY_SPINNER, debounce: number = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n}\n","import {\n  Component,\n  OnDestroy,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  HostListener,\n  ViewChild\n} from '@angular/core';\nimport { NgxSpinnerService } from './ngx-spinner.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LOADERS, DEFAULTS, Size, NgxSpinner, PRIMARY_SPINNER } from './ngx-spinner.enum';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'ngx-spinner',\n  templateUrl: 'ngx-spinner.component.html',\n  styleUrls: ['ngx-spinner.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fadeIn', [\n      state('in', style({ opacity: 1 })),\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate(300)\n      ]),\n      transition(':leave',\n        animate(200, style({ opacity: 0 })))\n    ])\n  ]\n})\nexport class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {\n\n  /**\n   * To set backdrop color\n   * Only supports RGBA color format\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() bdColor: string;\n  /**\n   * To set spinner size\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() size: Size;\n  /**\n   * To set spinner color(DEFAULTS.SPINNER_COLOR)\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() color: string;\n  /**\n   * To set type of spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() type: string;\n  /**\n   * To toggle fullscreen mode\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() fullScreen: boolean;\n  /**\n   * Spinner name\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() name: string;\n  /**\n   * z-index value\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() zIndex: number;\n  /**\n   * Custom template for spinner/loader\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() template: string;\n  /**\n   * Show/Hide the spinner\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() showSpinner: boolean;\n\n  /**\n   * To enable/disable animation\n   *\n   * @type {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n  @Input() disableAnimation: boolean = false;\n  /**\n   * Spinner Object\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  spinner: NgxSpinner = new NgxSpinner();\n  /**\n   * Array for spinner's div\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  divArray: Array<number>;\n  /**\n   * Counter for div\n   *\n   * @memberof NgxSpinnerComponent\n   *\n   */\n  divCount: number;\n  /**\n   * Show spinner\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  show: boolean;\n  /**\n   * Unsubscribe from spinner's observable\n   *\n   * @memberof NgxSpinnerComponent\n  **/\n  ngUnsubscribe: Subject<void> = new Subject();\n  /**\n   * Element Reference\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  @ViewChild('overlay') spinnerDOM;\n\n  @HostListener('document:keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n      event.returnValue = false;\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(private spinnerService: NgxSpinnerService, private changeDetector: ChangeDetectorRef) {\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.type = DEFAULTS.SPINNER_TYPE;\n    this.size = 'large';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.spinnerService.getSpinner(this.name)\n      .pipe(\n        takeUntil(this.ngUnsubscribe)\n      )\n      .subscribe((spinner: NgxSpinner) => {\n        this.setDefaultOptions();\n        Object.assign(this.spinner, spinner);\n        if (spinner.show) {\n          this.onInputChange();\n        }\n        this.changeDetector.detectChanges();\n      });\n  }\n  /**\n   * To set default ngx-spinner options\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  setDefaultOptions = () => {\n    this.spinner = new NgxSpinner({\n      name: this.name,\n      bdColor: this.bdColor,\n      size: this.size,\n      color: this.color,\n      type: this.type,\n      fullScreen: this.fullScreen,\n      divArray: this.divArray,\n      divCount: this.divCount,\n      show: this.show,\n      zIndex: this.zIndex,\n      template: this.template,\n      showSpinner: this.showSpinner\n    });\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n            if (propName === 'showSpinner') {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  getClass(type: string, size: Size): string {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((x, i) => i);\n    let sizeClass = '';\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'la-sm';\n        break;\n      case 'medium':\n        sizeClass = 'la-2x';\n        break;\n      case 'large':\n        sizeClass = 'la-3x';\n        break;\n      default:\n        break;\n    }\n    return 'la-' + type + ' ' + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n\n  transform(v: string): SafeHtml {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSpinnerComponent } from './ngx-spinner.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n  exports: [NgxSpinnerComponent]\n})\nexport class NgxSpinnerModule { }\n"]}